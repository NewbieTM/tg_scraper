import os
import asyncio
from pathlib import Path

from telethon import types
from telethon.errors import ChatAdminRequiredError, FloodWaitError


class ChannelPublisher:
    def __init__(self, client, target_channel, media_base_path):
        """
        :param client: Telethon-–∫–ª–∏–µ–Ω—Ç
        :param target_channel: username –∏–ª–∏ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º
        :param media_base_path: –∫–æ—Ä–µ–Ω—å –ø–∞–ø–∫–∏, –≥–¥–µ –ª–µ–∂–∞—Ç –º–µ–¥–∏–∞ (–Ω—É–∂–µ–Ω –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
        """
        self.client = client
        self.target_channel = target_channel
        self.channel_entity = None

        self.max_caption = int(os.getenv('MAX_CAPTION_LENGTH', 1000))
        self.max_media = int(os.getenv('MAX_MEDIA_PER_POST', 10))
        self.delay = int(os.getenv('PUBLISH_DELAY', 5))
        self.media_base = Path(media_base_path)

    async def initialize(self):
        """
        –ü–æ–ª—É—á–∞–µ–º entity —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å username –∏–ª–∏ ID)
        """
        try:
            self.channel_entity = await self.client.get_entity(self.target_channel)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {self.target_channel}: {e}")
            raise

    def _prepare_caption(self, text: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å:
          üì¢ **–ù–æ–≤—ã–π –ø–æ—Å—Ç**

          <text>

          _–ò—Å—Ç–æ—á–Ω–∏–∫: <target_channel>_
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ "_–ò—Å—Ç–æ—á–Ω–∏–∫_" –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.
        """
        header = "üì¢ **–ù–æ–≤—ã–π –ø–æ—Å—Ç**\n\n"
        footer = f"\n\n_–ò—Å—Ç–æ—á–Ω–∏–∫: {self.target_channel}_"
        full_text = text.strip()

        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –ø—Ä–æ—Å—Ç–æ —Å–∫–ª–µ–∏–≤–∞–µ–º
        if len(header) + len(full_text) + len(footer) <= self.max_caption:
            return header + full_text + footer

        # –ò–Ω–∞—á–µ –æ–±—Ä–µ–∑–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã footer —Ç–æ—á–Ω–æ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è
        allowed = self.max_caption - len(header) - len(footer) - 3  # "-3" –Ω—É–∂–Ω—ã –ø–æ–¥ "..."
        truncated = full_text[:allowed] + "..."
        return header + truncated + footer

    def _split_text(self, caption: str):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (caption) –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π.
        """
        parts = []
        for i in range(0, len(caption), 4096):
            parts.append(caption[i:i+4096])
        return parts

    async def _send_media_group(self, media_paths, caption):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤).
        –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç caption.
        """
        media_objects = []
        for idx, path in enumerate(media_paths[:self.max_media]):
            if not os.path.exists(path):
                continue
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            if path.lower().endswith(('.jpg', '.jpeg', '.png')):
                media_class = types.InputMediaPhoto
            else:
                media_class = types.InputMediaDocument

            # –ù–∞ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –≤ –∞–ª—å–±–æ–º–µ –≤–µ—à–∞–µ–º caption
            if idx == 0:
                media = media_class(media=path, caption=caption, parse_mode='markdown')
            else:
                media = media_class(media=path)
            media_objects.append(media)

        if media_objects:
            try:
                await self.client.send_file(
                    self.channel_entity,
                    media_objects,
                    supports_streaming=True
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ media_group: {e}")
                raise

    async def _send_single_media(self, path, caption):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é.
        """
        try:
            await self.client.send_file(
                self.channel_entity,
                path,
                caption=caption,
                parse_mode='markdown',
                supports_streaming=True
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ single_media: {e}")
            raise

    async def _send_text(self, text_parts):
        """
        –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏.
        """
        for part in text_parts:
            try:
                await self.client.send_message(
                    self.channel_entity,
                    part,
                    parse_mode='markdown',
                    link_preview=False
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
                raise
            await asyncio.sleep(self.delay)

    async def _clean_media(self, media_paths):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª—ã, –∞ –∑–∞—Ç–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏ –≤–ø–ª–æ—Ç—å –¥–æ media_base.
        """
        for path in media_paths:
            try:
                if os.path.exists(path):
                    os.remove(path)
                    dir_path = Path(path).parent
                    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞–≤–µ—Ä—Ö, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥—ë–º –¥–æ root media_base
                    while dir_path.exists() and dir_path != self.media_base and not any(dir_path.iterdir()):
                        dir_path.rmdir()
                        dir_path = dir_path.parent
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ {path}: {e}")

    async def publish(self, post: dict) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
          1) –§–æ—Ä–º–∏—Ä—É–µ–º caption
          2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã)
          3) –ï—Å–ª–∏ –º–µ–¥–∏–∞>1: _send_media_group, –µ—Å–ª–∏ =1: _send_single_media
             –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞: _send_text
          4) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        try:
            caption = self._prepare_caption(post['text'])
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–µ–¥–∏–∞
            media_list = [m['path'] for m in post.get('media', []) if os.path.exists(m['path'])]

            if media_list:
                if len(media_list) > 1:
                    await self._send_media_group(media_list, caption)
                else:
                    await self._send_single_media(media_list[0], caption)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                parts = self._split_text(caption)
                await self._send_text(parts)

            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - —á–∏—Å—Ç–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            await self._clean_media([m['path'] for m in post.get('media', [])])
            return True

        except ChatAdminRequiredError:
            print("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
            return False
        except FloodWaitError as e:
            print(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ (FloodWait).")
            await asyncio.sleep(e.seconds)
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
