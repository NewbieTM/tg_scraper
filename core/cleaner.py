import os
from pathlib import Path
from datetime import datetime, timedelta


class DataCleaner:
    def __init__(self, vector_db, storage, retention_days, media_base_path):
        """
        :param vector_db: —ç–∫–∑–µ–º–ø–ª—è—Ä VectorDatabase
        :param storage: —ç–∫–∑–µ–º–ø–ª—è—Ä DataManager
        :param retention_days: —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        :param media_base_path: –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏, –≥–¥–µ –ª–µ–∂–∞—Ç –º–µ–¥–∏–∞ (MEDIA_SAVE_PATH)
        """
        self.vector_db = vector_db
        self.storage = storage
        self.retention_days = retention_days
        self.media_base = Path(media_base_path)

    async def clean_all(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É:
         1) –í–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É post['date'])
         2) JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø–æ –ø–æ–ª—é timestamp)
         3) –ú–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (–ø–æ –∏–º–µ–Ω–∞–º –ø–∞–ø–æ–∫ YYYY-MM-DD)
        """
        # 1) –ß–∏—Å—Ç–∏–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        try:
            self.vector_db.clean_old_data(self.retention_days)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∏—Å—Ç–∫–µ VectorDatabase: {e}")

        # 2) –ß–∏—Å—Ç–∏–º JSON-–ª–æ–≥–∏
        try:
            await self.storage.clean_old_data(self.retention_days)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∏—Å—Ç–∫–µ JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")

        # 3) –ß–∏—Å—Ç–∏–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
        await self._clean_media_files()

    async def _clean_media_files(self):
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ –≤–∏–¥–∞: media/<channel_name>/<YYYY-MM-DD>/...
        –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã —Ö—Ä–∞–Ω–∏–º –º–µ–¥–∏–∞ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–∞—Ç—ã, –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º YYYY-MM-DD —Å cutoff.
        """
        cutoff_date = datetime.now() - timedelta(days=self.retention_days)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if not self.media_base.exists():
            return

        for channel_dir in self.media_base.iterdir():
            if not channel_dir.is_dir():
                continue
            # channel_dir = media/<channel_name>
            for date_dir in channel_dir.iterdir():
                # date_dir = media/<channel_name>/<YYYY-MM-DD>
                try:
                    dir_date = datetime.fromisoformat(date_dir.name)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

                if dir_date < cutoff_date:
                    # –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É date_dir —Ü–µ–ª–∏–∫–æ–º
                    try:
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                        for root, dirs, files in os.walk(date_dir, topdown=False):
                            for file in files:
                                file_path = Path(root) / file
                                try:
                                    file_path.unlink()
                                except Exception:
                                    pass
                            for d in dirs:
                                try:
                                    (Path(root) / d).rmdir()
                                except Exception:
                                    pass
                        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–∞–ø–∫—É date_dir
                        date_dir.rmdir()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –º–µ–¥–∏–∞: {date_dir}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–ø–∞–ø–∫–∏ {date_dir}: {e}")

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É channel_dir –ø—É—Å—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –µ–≥–æ
            try:
                if not any(channel_dir.iterdir()):
                    channel_dir.rmdir()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_dir}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_dir}: {e}")
