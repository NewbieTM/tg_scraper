import os
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv

from core.client import TelegramClientManager
from core.scraper import TelegramScraper
from core.storage import DataManager
from core.vector_db import VectorDatabase
from core.cleaner import DataCleaner
from core.publisher import ChannelPublisher

load_dotenv()

CONFIG = {
    'api_id': int(os.getenv('API_ID')),
    'api_hash': os.getenv('API_HASH'),
    'phone': os.getenv('PHONE'),
    'channels': [x.strip() for x in os.getenv('CHANNELS', '').split(',') if x.strip()],
    'parse_interval': int(os.getenv('PARSE_INTERVAL', 300)),  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
    'session_file': os.getenv('SESSION_FILE', 'session'),
    'vector_db': os.getenv('VECTOR_DB_FILE', 'db/vector_db.pkl'),
    'similarity': float(os.getenv('SIMILARITY_THRESHOLD', 0.85)),
    'target_channel': os.getenv('MY_CHANNEL'),
    'retention_days': int(os.getenv('DATA_RETENTION_DAYS', 7)),
    'media_path': os.getenv('MEDIA_SAVE_PATH', 'media')
}


async def main():
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs('db', exist_ok=True)
    os.makedirs(CONFIG['media_path'], exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–∫–ª–∏–µ–Ω—Ç
    client_manager = TelegramClientManager(
        CONFIG['session_file'],
        CONFIG['api_id'],
        CONFIG['api_hash'],
        CONFIG['phone']
    )
    tg_client = await client_manager.start()
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Telegram")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î, —Å–∫—Ä–∞–ø–µ—Ä, –ø–∞–±–ª–∏—à–µ—Ä, –∫–ª–∏–Ω–µ—Ä
    storage = DataManager(
        output_file='db/posts.json',
        last_dates_file='db/last_dates.json'
    )
    vector_db = VectorDatabase(
        threshold=CONFIG['similarity'],
        db_file=CONFIG['vector_db']
    )
    scraper = TelegramScraper(tg_client, vector_db, storage)
    publisher = ChannelPublisher(tg_client, CONFIG['target_channel'], CONFIG['media_path'])
    cleaner = DataCleaner(vector_db, storage, CONFIG['retention_days'], CONFIG['media_path'])

    await publisher.initialize()
    last_clean = datetime.now() - timedelta(days=1)  # —á—Ç–æ–±—ã —á–∏—Å—Ç–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤ –ø–µ—Ä–≤—É—é –∂–µ –Ω–æ—á—å

    print("üöÄ –°–∫—Ä–∞–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ctrl+C")

    try:
        while True:
            now = datetime.now()

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ 3:00 (–µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—à–ª–æ ‚â•24 —á–∞—Å–∞)
            if now.hour == 3 and (now - last_clean).days >= 1:
                print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
                await cleaner.clean_all()
                last_clean = now
                print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            print(f"\n‚è≥ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}")
            all_posts = []

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
            for channel in CONFIG['channels']:
                print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel}")
                try:
                    new_posts = await scraper.scrape_channel(channel)
                    if new_posts:
                        print(f"   –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(new_posts)}")
                        all_posts.extend(new_posts)
                    else:
                        print("   –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
                await asyncio.sleep(2)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ñ–∞–π–ª
            if all_posts:
                batch_record = {
                    'timestamp': datetime.now().isoformat(),
                    'posts': all_posts
                }
                try:
                    await storage.save_posts(batch_record)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ storage: {len(all_posts)} –ø–æ—Å—Ç–æ–≤")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ storage: {e}")

                # –û–±–Ω–æ–≤–ª—è–µ–º last_dates.json –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
                try:
                    last_dates_dict = await storage.load_all_last_dates()
                    for channel in CONFIG['channels']:
                        channel_posts = [p for p in all_posts if p['channel'] == channel]
                        if channel_posts:
                            # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                            max_date = max(p['date'] for p in channel_posts)
                            last_dates_dict[channel] = max_date
                    await storage.save_all_last_dates(last_dates_dict)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ last_dates.json: {e}")

                # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏
                for post in all_posts:
                    attempts = 3
                    while attempts > 0:
                        success = await publisher.publish(post)
                        if success:
                            break
                        attempts -= 1
                        print(f"   –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}")
                        await asyncio.sleep(10)

            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            await asyncio.sleep(CONFIG['parse_interval'])

    except KeyboardInterrupt:
        print("\nüõë –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    finally:
        await tg_client.disconnect()
        print("üîå Telegram-–∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")


if __name__ == '__main__':
    asyncio.run(main())
