import os
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.client import TelegramClientManager
from core.scraper import TelegramScraper
from core.publisher import ChannelPublisher
from core.db_manager import DatabaseManager

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env = [
    'API_ID', 'API_HASH', 'PHONE',
    'CHANNELS', 'MY_CHANNEL',
    'MEDIA_SAVE_PATH',
    'DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD'
]
missing = [var for var in required_env if not os.getenv(var)]
if missing:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
    sys.exit(1)

CONFIG = {
    'api_id': int(os.getenv('API_ID')),
    'api_hash': os.getenv('API_HASH'),
    'phone': os.getenv('PHONE'),
    'channels': [x.strip() for x in os.getenv('CHANNELS').split(',') if x.strip()],
    'parse_interval': int(os.getenv('PARSE_INTERVAL', 300)),       # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å (5 –º–∏–Ω—É—Ç)
    'parse_limit': int(os.getenv('PARSE_LIMIT', 5)),
    'session_file': os.getenv('SESSION_FILE', 'session.session'),
    'target_channel': os.getenv('MY_CHANNEL'),
    'media_path': os.getenv('MEDIA_SAVE_PATH'),
    'max_media': int(os.getenv('MAX_MEDIA_PER_POST', 10)),
    'max_caption': int(os.getenv('MAX_CAPTION_LENGTH', 1000)),
    'publish_delay': int(os.getenv('PUBLISH_DELAY', 2))
}


async def main():
    # 1) –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    os.makedirs(CONFIG['media_path'], exist_ok=True)

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–∫–ª–∏–µ–Ω—Ç
    client_manager = TelegramClientManager(
        session_file=CONFIG['session_file'],
        api_id=CONFIG['api_id'],
        api_hash=CONFIG['api_hash'],
        phone=CONFIG['phone']
    )
    try:
        tg_client = await client_manager.start()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TelegramClientManager: {e}")
        return

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()
    try:
        await db_manager.initialize()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        await tg_client.disconnect()
        return

    # 4) –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–ø–µ—Ä –∏ –ø–∞–±–ª–∏—à–µ—Ä
    scraper = TelegramScraper(
        client=tg_client,
        db_manager=db_manager,
        media_path=CONFIG['media_path']
    )
    publisher = ChannelPublisher(
        client=tg_client,
        target_channel=CONFIG['target_channel'],
        max_media=CONFIG['max_media'],
        max_caption=CONFIG['max_caption'],
        delay=CONFIG['publish_delay']
    )
    try:
        await publisher.initialize()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChannelPublisher: {e}")
        await db_manager.close()
        await tg_client.disconnect()
        return

    print("üöÄ –°–∫—Ä–∞–ø–µ—Ä –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        while True:
            now_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            print(f"\n‚è≥ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {now_str}")

            all_posts = []
            for channel_username in CONFIG['channels']:
                print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ `{channel_username}`...")
                try:
                    new_posts = await scraper.scrape_channel(channel_username, limit=CONFIG['parse_limit'])
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ scrape_channel({channel_username}): {e}")
                    continue

                if new_posts:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
                    all_posts.extend(new_posts)
                else:
                    print("  ‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ ¬´—Ñ–ª—É–¥–∏—Ç—å¬ª Telegram API
                await asyncio.sleep(2)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã, –ø—É–±–ª–∏–∫—É–µ–º
            if all_posts:
                print(f"\nüîÑ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {len(all_posts)} –ø–æ—Å—Ç–æ–≤...")
                for post in all_posts:
                    attempts = 3
                    while attempts > 0:
                        success = await publisher.publish(post)
                        if success:
                            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID={post['id']} –∏–∑ –∫–∞–Ω–∞–ª–∞ `{post['channel']}`")

                            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            await publisher.clean_media(post)

                            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î –∫–∞–∫ ¬´–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ¬ª
                            await db_manager.mark_post_published(post_id=post['id'], channel=post['channel'])
                            break

                        attempts -= 1
                        if attempts > 0:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post['id']}. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {attempts}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫.")
                            await asyncio.sleep(10)
                        else:
                            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {post['id']} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å FloodWaitError —Å—Ä–∞–∑—É)
                    await asyncio.sleep(CONFIG['publish_delay'])

            # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            print(f"‚è∞ –ñ–¥—ë–º {CONFIG['parse_interval']} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...\n")
            await asyncio.sleep(CONFIG['parse_interval'])

    except KeyboardInterrupt:
        print("\nüõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–∞ –ø–æ Ctrl+C...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        await db_manager.close()
        await tg_client.disconnect()
        print("üîå –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == '__main__':
    # –î–ª—è Windows Event Loop
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
